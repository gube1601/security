{"version":3,"sources":["components/BcryptForm.js","components/SHAForm.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["bcrypt","require","BryptForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","password","saltRounds","hash","handleChangePassword","bind","assertThisInitialized","handleChangeSaltRounds","handleSubmit","event","setState","target","value","preventDefault","salt","genSaltSync","Number","hashSync","react_default","a","createElement","className","onSubmit","type","onChange","readOnly","React","Component","jsSHA","SHAForm","rounds","handleChangeRounds","shaObj","numRounds","update","getHash","App","BcryptForm_BryptForm","SHAForm_SHAForm","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.4cb0671b.chunk.js","sourcesContent":["import React from 'react';\r\nconst bcrypt = require('bcryptjs');\r\n\r\nexport default class BryptForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { password: '', saltRounds: '10', hash: '' };\r\n\r\n        this.handleChangePassword = this.handleChangePassword.bind(this);\r\n        this.handleChangeSaltRounds = this.handleChangeSaltRounds.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChangePassword(event) {\r\n        this.setState({ password: event.target.value });\r\n    }\r\n\r\n    handleChangeSaltRounds(event) {\r\n        this.setState({ saltRounds: event.target.value });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        //alert('Generating with password ' + this.state.password + ' and ' + this.state.saltRounds + ' salt rounds');\r\n        var salt = bcrypt.genSaltSync(Number(this.state.saltRounds));\r\n        var hash = bcrypt.hashSync(this.state.password, salt);\r\n        //alert('Hash is ' + hash);\r\n\r\n        this.setState({ hash: hash });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"FormContainer\">\r\n                <form className=\"Form\" onSubmit={this.handleSubmit}>\r\n                    <div className=\"FormTitle\">\r\n                        Bcrypt\r\n                    </div>\r\n                    <div className=\"ElementContainer\">\r\n                        Password\r\n                        <input type=\"text\" value={this.state.password} onChange={this.handleChangePassword} />\r\n                    </div>\r\n                    <div className=\"ElementContainer\">\r\n                        Salt Rounds\r\n                        <input type=\"text\" value={this.state.saltRounds} onChange={this.handleChangeSaltRounds} />\r\n                    </div>\r\n                    <div className=\"ElementContainer\">\r\n                        <input className=\"InputTextField\" type=\"submit\" value=\"Generate\" />\r\n                    </div>\r\n                    <div className=\"ElementContainer\">\r\n                        <textarea type=\"text\" value={this.state.hash} readOnly />\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\r\nconst jsSHA = require(\"jssha\");\r\n\r\nexport default class SHAForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { password: '', rounds: '10', hash: '' };\r\n\r\n        this.handleChangePassword = this.handleChangePassword.bind(this);\r\n        this.handleChangeRounds = this.handleChangeRounds.bind(this);\r\n        this.handleSubmit = this.handleSubmit.bind(this);\r\n    }\r\n\r\n    handleChangePassword(event) {\r\n        this.setState({ password: event.target.value });\r\n    }\r\n\r\n    handleChangeRounds(event) {\r\n        this.setState({ rounds: event.target.value });\r\n    }\r\n\r\n    handleSubmit(event) {\r\n        event.preventDefault();\r\n        var shaObj = new jsSHA(\"SHA-256\", \"TEXT\", { numRounds: Number(this.state.rounds) });\r\n        shaObj.update(this.state.password);\r\n        var hash = shaObj.getHash(\"HEX\");\r\n        this.setState({ hash: hash });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"FormContainer\">\r\n                <form className=\"Form\" onSubmit={this.handleSubmit}>\r\n                    <div className=\"FormTitle\">\r\n                        SHA-2\r\n                    </div>\r\n                    <div className=\"ElementContainer\">\r\n                        Password\r\n                        <input type=\"text\" value={this.state.password} onChange={this.handleChangePassword} />\r\n                    </div>\r\n                    <div className=\"ElementContainer\">\r\n                        Rounds\r\n                        <input type=\"text\" value={this.state.rounds} onChange={this.handleChangeRounds} />\r\n                    </div>\r\n                    <div className=\"ElementContainer\">\r\n                        <input className=\"InputTextField\" type=\"submit\" value=\"Generate\" />\r\n                    </div>\r\n                    <div className=\"ElementContainer\">\r\n                        <textarea type=\"text\" value={this.state.hash} readOnly />\r\n                    </div>\r\n                </form>\r\n            </div >\r\n        );\r\n    }\r\n}","import React, { Component } from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport BcryptForm from './components/BcryptForm';\nimport SHAForm from './components/SHAForm';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <p>\n            SHA-2 and Bcrypt\n          </p>\n          <BcryptForm />\n          <SHAForm />\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}